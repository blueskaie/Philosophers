import java.util.ArrayList;
import java.util.concurrent.locks.*;
public class DiningServer{
    ArrayList<Philosopher> philosopher = new ArrayList<>();
    public Lock lock = new ReentrantLock();
    private Condition eat = lock.newCondition();
    public void initialize(ArrayList<Philosopher> theEnlightened){
        philosopher=theEnlightened;
    }

    public void takeChopsticks(int philIndex){
        lock.lock();
        try {
        	Philosopher cur_philosopher = philosopher.get(philIndex);
        	cur_philosopher.state=State.HUNGRY;
            displayState(philIndex, "HUNGRY");
            test(philIndex);
            if (cur_philosopher.state != State.EATING) eat.await(); //if the philosopher was not allowed to eat, wait
        }catch (InterruptedException e){}
        finally {
            lock.unlock();
        }
    }
  
    public void returnChopsticks(int philIndex){
    	Philosopher cur_philosopher = philosopher.get(philIndex);
    	cur_philosopher.state=State.THINKING;
        displayState(philIndex, "THINKING");
        test((philIndex+4)%5);
        test((philIndex+1)%5);
    }
 
    public void test(int philIndex){
    	Philosopher cur_philosopher = philosopher.get(philIndex);
    	Philosopher previous_philosopher = philosopher.get((philIndex+4)%5);
    	Philosopher next_philosopher = philosopher.get((philIndex+1)%5);
    	boolean Condition = (previous_philosopher.state !=State.EATING)&&(cur_philosopher.state==State.HUNGRY)&&(next_philosopher.state !=State.EATING);
        if(Condition == true){
            philosopher.get(philIndex).state=State.EATING; 
            displayState(philIndex, "EATING");
            eat.signal();
        }
    }
    public void displayState(int philID, String msg) {
    	System.out.println("Philosopher "+philID+" is "+msg);
    }
}